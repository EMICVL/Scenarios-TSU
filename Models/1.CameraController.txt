using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Helper;
public class PlayerCamera : MonoBehaviour {

    #region Public Fields &Properties

    #endregion
    #region Private Fields & Properties
    private Vector3 _cameraNomalPosition = new Vector3(0.005246997f, 1.755591f, -2.260051f);


    [SerializeField]
    private float sensitvivity = 5f;
    [SerializeField]
    public float minimumAngle = -40f;
    [SerializeField]
    public float maximumAngle = 60f;

    private float rotationY = 0f;

    private Transform _camera;
    private Transform _player;

    private PlayerCharacter _pc;

    private CameraState _state = CameraState.Normal;

    private CameraTargetObject _cameraTargetObject;
    private CameraMountPoint _cameraMountPoint;

    #endregion

    #region Getters & Setters
    public CameraState cameraState
    {
        get { return _state; }
    }

    #endregion

    #region System Methods
    private void Start () {
		if (GetComponent<NetworkView>().isMine||Network.peerType == NetworkPeerType.Disconnected)
        {
            _pc = this.GetComponent<PlayerCharacter>();
            _camera = GameObject.FindGameObjectWithTag(GameTag.PlayerCamera).transform;
            _player = this.transform;

            _cameraTargetObject = new CameraTargetObject();
            _cameraTargetObject.Init("Camera Target", new Vector3(0f, 1f, 0f), new GameObject().transform, _player.transform);

            _cameraMountPoint = new CameraMountPoint();
            _cameraMountPoint.Init("Camera Mount", _cameraNomalPosition, new GameObject().transform, _cameraTargetObject.XForm);

            _camera.parent = _cameraTargetObject.XForm.parent;
        }
        else
        {
            enabled = false;

        }
	}
	
	
	private void LateUpdate () {
        switch (_state)
        {
            case CameraState.Normal:
                RotateCamera();
                _camera.position = _cameraMountPoint.XForm.position;
                _camera.LookAt(_cameraTargetObject.XForm);

                break;
            case CameraState.Target:
                break;

        }
	}


    #endregion

    #region Custom Methods

    private void RotateCamera()
    {
        rotationY -= Input.GetAxis(PlayerInput.RightY) * sensitvivity;
        rotationY = Mathf.Clamp(rotationY, minimumAngle, maximumAngle);
        _cameraTargetObject.XForm.localEulerAngles = new Vector3(-rotationY, _cameraTargetObject.XForm.localEulerAngles.y, 0);


    }
    #endregion
}

